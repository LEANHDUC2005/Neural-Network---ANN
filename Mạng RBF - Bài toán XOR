import numpy as np
import math

# Dữ liệu XOR gồm 4 mẫu đầu vào và nhãn mục tiêu
X = np.array([[0, 0, 1, 1],
              [0, 1, 0, 1]])
d = np.array([0, 1, 1, 0])  # Nhãn đúng cho từng đầu vào
n = 0.1  # Tốc độ học (learning rate)

# Chọn 2 tâm RBF: điểm [1,1] và [0,0]
u_1 = X[:, 3].reshape(2, 1)  # Tâm 1: [1,1]
u_2 = X[:, 0].reshape(2, 1)  # Tâm 2: [0,0]
u = np.hstack((u_1, u_2))    # Ma trận 2 cột chứa 2 tâm

# Khởi tạo trọng số ngẫu nhiên (3 phần tử: bias + 2 node RBF)
W = np.random.rand(3)

# Hàm tính khoảng cách Euclidean 2D
def khoangcach(x1, x2, y1, y2):
    return np.sqrt((x1 - x2)**2 + (y1 - y2)**2)

# Hàm tính sigma (độ rộng Gaussian) dựa trên khoảng cách giữa 2 tâm
def sigma(x2, x1, y2, y1):
    return float(khoangcach(x2, x1, y2, y1) / math.sqrt(2))

# Hàm RBF Gaussian
def RBF(a, b, c, d, e):
    if e > 0:
        return math.exp(-((khoangcach(a, b, c, d)**2) / (e**2)))
    return 0.0

# Tính sigma từ khoảng cách giữa 2 tâm
S = sigma(int(u[0, 0]), int(u[0, 1]), int(u[1, 0]), int(u[1, 1]))

# Tính ma trận fi (2 hàng: 2 node RBF, 4 cột: 4 đầu vào)
fi = np.empty((2, 4))
for i in range(X.shape[1]):
    for j in range(2):
        # Gán giá trị RBF tương ứng với input i và tâm j
        fi[j, i] = round(RBF(int(X[0, i]), int(u[0, j]), int(X[1, i]), int(u[1, j]), S), 3)

# Thêm bias (hàng 1) vào fi
fi = np.vstack((np.ones((1, X.shape[1])), fi))

# Huấn luyện
Huanluyen = 0
Hoitu = False
MAX_EPOCH = 1000  # Số lần lặp tối đa

while not Hoitu and Huanluyen < MAX_EPOCH:
    E = 0  # Tổng sai số bình phương
    for i in range(X.shape[1]):
        net = np.dot(W, fi[:, i])  # Tính đầu ra tuyến tính
        y = net                    # Không dùng hàm kích hoạt, giữ y = net
        e = d[i] - y               # Sai số
        W = W + n * e * fi[:, i]   # Cập nhật trọng số
        E += 0.5 * (e ** 2)        # Cộng dồn sai số
    if Huanluyen % 100 == 0:
        print(f"Epoch {Huanluyen}, Error = {E:.5f}")
    if E <= 1e-2:  # Ngưỡng sai số để dừng huấn luyện
        Hoitu = True
    Huanluyen += 1

# In kết quả sau huấn luyện
print(f"\nSố lần huấn luyện: {Huanluyen}")
print(f"Sai số cuối cùng: {E:.5f}")
print(f"Trọng số cuối cùng W: {W}")
print(f"Đầu vào RBF: {fi}")
print(f"Dolechchuan: {S})")

# Dự đoán đầu ra sau huấn luyện
print("\nDự đoán sau huấn luyện:")
for i in range(X.shape[1]):
    net = np.dot(W, fi[:, i])
    y = 1 if net >= 0.5 else 0  # Ngưỡng quyết định 0.5
    print(f"Input: {X[:, i]} => Output: {y} (Target: {d[i]})")

