import numpy as np

# Dữ liệu đầu vào (3 đặc trưng x 9 mẫu)
X = np.array([[1, 1, 1, 1, 1, 1, 1, 1, 1],
              [0.3, 0.35, 0.28, 0.8, 0.7, 1, 0.8, 1.2, 1.6],
              [0.5, 0.45, 0.35, 0.75, 0.78, 0.7, 0.4, 0.5, 0.45]])

# Nhãn đầu ra cho 2 neuron
d = np.array([[0, 0, 0, 0, 0, 0, 1, 1, 1],
              [0, 0, 0, 1, 1, 1, 1, 1, 1]])

# Khởi tạo trọng số ngẫu nhiên
W = np.random.rand(3, 2)
print(f'Trong so ban dau : {W}')

# Các thông số
n = 0.1
epoch = 0
converged = False

# Hàm kích hoạt step
def step(x):
    return 1 if x >= 0 else 0

# Huấn luyện với 2 vòng lặp
while not converged:
    E = np.zeros(2)
    for i in range(X.shape[1]):  # lặp qua từng mẫu
        x_i = X[:, i]
        for j in range(W.shape[1]):  # lặp qua từng neuron
            net = W[:, j].T @ x_i
            y = step(net)
            e = d[j, i] - y
            W[:, j] += n * e * x_i
            E[j] += 0.5 * e**2

    epoch += 1
    print(f"Epoch {epoch}, E: {E}")
    if np.all(E == 0):
        converged = True

print(f"\nHuấn luyện hoàn tất sau {epoch} lần lặp!\nTrọng số cuối cùng:\n{W}")

# Kiểm tra với dữ liệu mới
X0 = np.ones((1, 3))
X_input = np.random.rand(2, 3)
X_test = np.vstack((X0, X_input))

Y = np.empty((2, 3))
for i in range(3):
    x_i = X_test[:, i]
    for j in range(2):
        net = W[:, j].T @ x_i
        Y[j, i] = step(net)

print(f"\nX_test:\n{X_test}")
print(f"Y_output:\n{Y}")