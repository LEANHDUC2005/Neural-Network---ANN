
import numpy as np
import math
X = np.array([[0.5, 1, 1],
              [1, 0.6, 1]])
V = np.array([[0.5, 1],[-1, 0.4]])
d = np.array([1, 0.3, 1.5])
W = np.array([-0.8, 0.6])
n = 0.1
e = 1e-4
def sigmoid(x):
   return 1 /( 1 + np.exp(-x))

Hoiquy = False
Lanthu = 0
while not Hoiquy:
   E = 0
   for i in range(X.shape[1]):
      yh = np.empty(len(V))
      X_i = X[:,i]
      neth = V.T @ X_i
      yh = sigmoid(neth)
      neto = W.T @ yh
      yo = neto
      S_w =  d[i] - yo
      W = W + n * S_w * yh
      S_v = np.zeros_like(V)
      E += 0.5 * (S_w**2)
      for k in range(V.shape[1]):
         S_v[k] = S_w * yh[k] * (1 - yh[k]) * W[k]
         V[k] = V[k] + n * S_v[k] * X_i
      
   if E <= e:
    Hoiquy = True
   else:
    Lanthu +=1
print(f"W= {W}")
print(f'E= {E}')
print(f" So lan thu {Lanthu}")